spring:
  application:
    name: flik-batch
  main:
    web-application-type: servlet
  batch:
    jdbc:
      initialize-schema: always
    job:
      enabled: false # 자동 실행

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://mysql:3306/flik_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul}
    username: ${MYSQL_DATABASE}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: false

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:redis}
      port: ${SPRING_DATA_REDIS_PORT:6379}

server:
  port: 8081


# Actuator endpoints for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,info,beans,env
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    redis:
      enabled: true
    db:
      enabled: true
    diskspace:
      enabled: true
  info:
    env:
      enabled: true

# Logging configuration
logging:
  level:
    root: INFO
    yunrry.flik: DEBUG
    org.springframework.security: INFO
    org.springframework.web: INFO
    yunrry.flik.batch.job.GooglePlacesEnrichmentJob: DEBUG
    NULL_RATING_LOGGER: INFO
    NO_PLACE_FOUND_LOGGER: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30


jwt:
  secret: ${JWT_SECRET:your-secret-key-here-must-be-at-least-256-bits}
  access-token-expiry: 36000 # 10시간
  refresh-token-expiry: 604800 # 7일


# rate-limit 설정 완성
rate-limit:
  tourism-api:
    daily-limit: 1000
    reset-hour: 0  # 자정 리셋


# 스케줄러 설정 추가
scheduler:
  tourism-batch:
    cron: "0 0 2 * * ?"  # 매일 새벽 2시
    enabled: true

# API 설정 추가
tourism-api:
  base-url: "http://apis.data.go.kr/B551011/KorService2"
  service-key: ${TOURISM_API_SERVICE_KEY}
  timeout: 30000
  retry-attempts: 3


discord:
  webhook:
    url: ${DISCORD_WEBHOOK}


google:
  places:
    api-key: ${GOOGLE_PLACES_API_KEY}
