name: Build and Deploy Flik Batch Server to Raspberry Pi

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-batch
  RASPBERRY_PI_HOST: ${{ secrets.RASPBERRY_PI_HOST }}
  RASPBERRY_PI_USER: ${{ secrets.RASPBERRY_PI_USER }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  TOURISM_API_SERVICE_KEY: ${{ secrets.TOURISM_API_SERVICE_KEY }}
  TOURISM_API_SERVICE_KEY_2: ${{ secrets.TOURISM_API_SERVICE_KEY_2 }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  GOOGLE_PLACES_API_KEY: ${{ secrets.GOOGLE_PLACES_API_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test Flik Batch Server
        run: |
          chmod +x gradlew
          ./gradlew clean test -Dspring.profiles.active=test --parallel --max-workers=4

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Time Start
        id: build_start
        run: echo "build_start=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          config-inline: |
            [worker.oci]
              max-parallelism = 4
            [worker.containerd]
              max-parallelism = 4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup image name
        run: echo "IMAGE_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_LOWER }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-arm64

      - name: Build and push Flik Batch Server image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            BUILD_TIME=${{ github.run_number }}
          builder: ${{ steps.buildx.outputs.name }}
        timeout-minutes: 30

      - name: Build Time End
        run: |
          build_end=$(date +%s)
          build_duration=$((build_end - ${{ steps.build_start.outputs.build_start }}))
          echo "Build completed in ${build_duration} seconds ($((build_duration/60)) minutes)"

      - name: Deploy Flik Batch Server to Raspberry Pi
        run: |
          # SSH 키 설정
          mkdir -p ~/.ssh
          echo "${{ secrets.RASPBERRY_PI_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 2022 ${{ env.RASPBERRY_PI_HOST }} >> ~/.ssh/known_hosts
          
          # SSH 연결 및 배포 스크립트 실행
          ssh -i ~/.ssh/id_rsa -p 2022 -o ConnectTimeout=300 ${{ env.RASPBERRY_PI_USER }}@${{ env.RASPBERRY_PI_HOST }} << 'EOF'
          DEPLOY_START=$(date +%s)
          echo "Starting batch server deployment at $(date)"
          
          # Clone or pull batch server repository
          if [ ! -d "/home/yoon/flik-batch-server" ]; then
            cd /home/yoon
            echo "Cloning batch repository..."
            git clone https://github.com/${{ github.repository }}.git flik-batch-server
          else
            cd /home/yoon/flik-batch-server
            echo "Pulling latest changes..."
            git pull origin main
          fi
          
          cd /home/yoon/flik-batch-server
          
          # 로그 디렉토리 생성 및 권한 설정
          echo "Creating logs directory with proper permissions..."
          mkdir -p logs
          
          # Docker 컨테이너의 batch 사용자(UID 1001)에게 권한 부여
          sudo chown -R 1001:1001 logs
          chmod -R 755 logs
          
          # .env 파일 생성
          echo "Creating .env file..."
          cat > .env << ENVEOF
          BUILD_TAG=${{ github.sha }}
          DOCKER_REGISTRY=${{ env.REGISTRY }}
          DOCKER_REPO=${{ env.IMAGE_NAME }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          TOURISM_API_SERVICE_KEY=${{ secrets.TOURISM_API_SERVICE_KEY }}
          TOURISM_API_SERVICE_KEY_2=${{ secrets.TOURISM_API_SERVICE_KEY_2 }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}
          GOOGLE_PLACES_API_KEY=${{ secrets.GOOGLE_PLACES_API_KEY }}
          ENVEOF
          
          # Docker 레지스트리 로그인
          echo "Logging into Docker registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # 이미지 태그 설정 (metadata 출력과 일치)
          export IMAGE_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          
          # 사용 가능한 태그들 확인
          AVAILABLE_TAGS=(
            "main-${{ github.sha }}-arm64"
            "${{ github.sha }}-arm64" 
            "latest-arm64"
            "main-arm64"
          )
          
          PULLED_IMAGE=""
          for tag in "${AVAILABLE_TAGS[@]}"; do
            IMAGE_FULL="${{ env.REGISTRY }}/$IMAGE_LOWER:$tag"
            echo "Trying to pull: $IMAGE_FULL"
          
            if docker manifest inspect "$IMAGE_FULL" > /dev/null 2>&1; then
              echo "Found image: $IMAGE_FULL"
              docker pull "$IMAGE_FULL"
              docker tag "$IMAGE_FULL" flik-batch:latest
              PULLED_IMAGE="$IMAGE_FULL"
              break
            else
              echo "Image not found: $IMAGE_FULL"
            fi
          done
          
          if [ -z "$PULLED_IMAGE" ]; then
            echo "Error: No valid image found for any of the attempted tags"
            echo "Available tags were: ${AVAILABLE_TAGS[*]}"
            exit 1
          fi
          
          echo "Successfully pulled and tagged: $PULLED_IMAGE"
          
          # 네트워크 존재 확인 및 생성
          if ! docker network ls | grep -q goormthon-java_dormung-network; then
            echo "Creating goormthon-java_dormung-network..."
            docker network create goormthon-java_dormung-network
          fi
          
          # 인프라 서비스 상태 확인
          echo "Checking infrastructure services..."
          if ! docker ps | grep -q mysql; then
            echo "Warning: MySQL container not running"
            exit 1
          fi
          if ! docker ps | grep -q redis; then
            echo "Warning: Redis container not running"
            exit 1
          fi
          
          # Blue/Green deployment with docker compose
          CURRENT_CONTAINER=$(docker ps --filter "name=batch-" --format "{{.Names}}" | head -1)
          if [ "$CURRENT_CONTAINER" = "batch-blue" ]; then
            NEW_ENV="green"
            OLD_ENV="blue"
            NEW_PORT="8086"
          else
            NEW_ENV="blue"
            OLD_ENV="green"
            NEW_PORT="8085"
          fi
          
          echo "Deploying batch server to $NEW_ENV environment (port: $NEW_PORT)..."
          
          # 기존 NEW_ENV 컨테이너 중지 (있다면)
          if docker ps -q -f name=batch-$NEW_ENV | grep -q .; then
            echo "Stopping existing batch-$NEW_ENV container..."
            docker compose --profile $NEW_ENV down batch-$NEW_ENV || true
          fi
          
          # 새 환경 시작 (docker compose 사용)
          echo "Starting batch-$NEW_ENV with docker compose..."
          docker compose --env-file .env --profile $NEW_ENV up -d batch-$NEW_ENV
          
          # 헬스체크
          echo "Waiting for batch-$NEW_ENV to be healthy..."
          HEALTH_CHECK_COUNT=0
          MAX_HEALTH_CHECKS=18
          
          while [ $HEALTH_CHECK_COUNT -lt $MAX_HEALTH_CHECKS ]; do
            if curl -f http://localhost:$NEW_PORT/actuator/health > /dev/null 2>&1; then
              echo "batch-$NEW_ENV is healthy after $((HEALTH_CHECK_COUNT * 10)) seconds"
              break
            fi
            HEALTH_CHECK_COUNT=$((HEALTH_CHECK_COUNT + 1))
            if [ $HEALTH_CHECK_COUNT -eq $MAX_HEALTH_CHECKS ]; then
              echo "batch-$NEW_ENV failed to start after $((MAX_HEALTH_CHECKS * 10)) seconds"
              echo "Container logs:"
              docker compose logs batch-$NEW_ENV --tail 30
              exit 1
            fi
            echo "Health check $HEALTH_CHECK_COUNT/$MAX_HEALTH_CHECKS..."
            sleep 10
          done
          
          # 배치 서버 테스트
          echo "Testing batch deployment..."
          sleep 5
          
          HEALTH_RESULT=""
          
          if curl -sf http://localhost:$NEW_PORT/actuator/health > /dev/null 2>&1; then
            HEALTH_RESULT="ok"
          else
            HEALTH_RESULT="fail"
          fi
          
          echo "Test results - Health: $HEALTH_RESULT"
          
          if [ "$HEALTH_RESULT" = "fail" ]; then
            echo "Batch deployment failed - health check failed"
            echo "Container logs:"
            docker compose logs batch-$NEW_ENV --tail 50
          
            echo "Rolling back..."
            docker compose --profile $NEW_ENV down batch-$NEW_ENV || true
          
            if [ "$OLD_ENV" != "" ]; then
              echo "Attempting to restart previous environment: batch-$OLD_ENV"
              docker compose --env-file .env --profile $OLD_ENV up -d batch-$OLD_ENV || echo "Failed to restart old environment"
            fi
            exit 1
          else
            echo "Batch deployment successful!"
          
            # 이전 환경 정리
            if [ "$OLD_ENV" != "" ] && docker ps -q -f name=batch-$OLD_ENV | grep -q .; then
              echo "Stopping old environment: batch-$OLD_ENV"
              docker compose --profile $OLD_ENV down batch-$OLD_ENV || true
            fi
          
            DEPLOY_END=$(date +%s)
            DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
            echo "Batch Blue/Green deployment completed!"
            echo "Active environment: batch-$NEW_ENV (port: $NEW_PORT)"
            echo "Total deployment time: ${DEPLOY_DURATION} seconds ($((DEPLOY_DURATION/60)) minutes)"
          
            # 정리 작업 (중요한 네트워크 보호)
            echo "Cleaning up unused Docker resources..."
          
            # 사용하지 않는 이미지 삭제
            echo "Removing unused images..."
            docker image prune -af || true
          
            # dangling 이미지 삭제
            docker images -f "dangling=true" -q | xargs -r docker rmi -f || true
          
            # flik-batch 관련 오래된 이미지 삭제 (latest 태그 제외)
            docker images | grep -E "flik-batch|$IMAGE_LOWER" | grep -v "latest" | awk 'NR>2 {print $3}' | xargs -r docker rmi -f || true
          
            # 중지된 컨테이너 삭제
            docker container prune -f || true
          
            echo "Docker cleanup completed"
          
            # 디스크 사용량 확인
            echo "Remaining disk usage:"
            df -h / || true
            docker system df || true
          fi
          EOF
          
          

      - name: Verify Batch deployment
        run: |
          ssh -i ~/.ssh/id_rsa -p 2022 ${{ env.RASPBERRY_PI_USER }}@${{ env.RASPBERRY_PI_HOST }} << 'EOF'
          echo "Final verification of Batch endpoints..."
          sleep 5

          echo "Testing batch health endpoint..."
          if curl -sf http://localhost:8085/actuator/health || curl -sf http://localhost:8086/actuator/health; then
            echo "Batch health check passed"
          else
            echo "Batch health check failed"
          fi

          echo "Container Status:"
          docker ps --filter "name=batch-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true

          echo "System Resources:"
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" $(docker ps --filter "name=batch-" -q) || true
          EOF

      - name: Discord Success Notification
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            **Flik Batch Server 배포 성공!**
            **프로젝트**: ${{ github.repository }}
            **브랜치**: ${{ github.ref_name }}
            **커밋**: `${{ github.sha }}`
            **작성자**: ${{ github.actor }}
            **메시지**: ${{ github.event.head_commit.message }}
            **배치 서버**: 데이터 수집 작업 준비 완료

      - name: Discord Failure Notification
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            **Flik Batch Server 배포 실패!**
            **프로젝트**: ${{ github.repository }}
            **브랜치**: ${{ github.ref_name }}
            **커밋**: `${{ github.sha }}`
            **작성자**: ${{ github.actor }}
            **메시지**: ${{ github.event.head_commit.message }}
            **자동 롤백이 실행되었습니다**
            **로그**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}