name: Build and Deploy Flik Batch Server to Raspberry Pi

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-batch
  RASPBERRY_PI_HOST: ${{ secrets.RASPBERRY_PI_HOST }}
  RASPBERRY_PI_USER: ${{ secrets.RASPBERRY_PI_USER }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  TOURISM_API_SERVICE_KEY: ${{ secrets.TOURISM_API_SERVICE_KEY }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test Flik Batch Server
        run: |
          chmod +x gradlew
          ./gradlew clean test -Dspring.profiles.active=test --parallel --max-workers=4

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Time Start
        id: build_start
        run: echo "build_start=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          config-inline: |
            [worker.oci]
              max-parallelism = 4
            [worker.containerd]
              max-parallelism = 4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup image name
        run: echo "IMAGE_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_LOWER }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-arm64

      - name: Clear all caches before build
        run: |
          echo "Clearing all build caches..."
          rm -rf ~/.gradle/caches || true
          rm -rf ~/.gradle/wrapper || true
          docker system prune -af --volumes || true

      - name: Build and push Flik Batch Server image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
          pull: true  # 베이스 이미지도 강제로 최신으로
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ github.sha }}
            BUILD_TIME=${{ github.run_number }}
            FORCE_REBUILD=true
          builder: ${{ steps.buildx.outputs.name }}

      - name: Build Time End
        run: |
          build_end=$(date +%s)
          build_duration=$((build_end - ${{ steps.build_start.outputs.build_start }}))
          echo "Build completed in ${build_duration} seconds ($((build_duration/60)) minutes)"

      - name: Deploy Flik Batch Server to Raspberry Pi
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.RASPBERRY_PI_HOST }}
          username: ${{ env.RASPBERRY_PI_USER }}
          key: ${{ secrets.RASPBERRY_PI_SSH_KEY }}
          port: 2022
          timeout: 300s
          command_timeout: 30m
          script: |
            DEPLOY_START=$(date +%s)
            echo "Starting batch server deployment at $(date)"
            
            # Clone or pull batch server repository
            if [ ! -d "/home/yoon/flik-batch-server" ]; then
              cd /home/yoon
              echo "Cloning batch repository..."
              git clone https://github.com/${{ github.repository }}.git flik-batch-server
            else
              cd /home/yoon/flik-batch-server
              echo "Pulling latest changes..."
              git pull origin main
            fi
            
            cd /home/yoon/flik-batch-server
            
            # .env 파일 생성
            echo "Creating .env file..."
            cat > .env << EOF
            BUILD_TAG=${{ github.sha }}
            DOCKER_REGISTRY=${{ env.REGISTRY }}
            DOCKER_REPO=${{ env.IMAGE_NAME }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            TOURISM_API_SERVICE_KEY=${{ secrets.TOURISM_API_SERVICE_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF
            
            # Docker 레지스트리 로그인
            echo "Logging into Docker registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # 이미지 pull 및 태그
            export IMAGE_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
            echo "Pulling new batch image..."
            docker pull ${{ env.REGISTRY }}/$IMAGE_LOWER:${{ github.sha }}-arm64
            docker tag ${{ env.REGISTRY }}/$IMAGE_LOWER:${{ github.sha }}-arm64 flik-batch:latest
            
            # 인프라 서비스 상태 확인 (기존 컨테이너 활용)
            echo "Checking infrastructure services..."
            if ! docker ps | grep -q mysql; then
              echo "Warning: MySQL container not running"
              exit 1
            fi
            if ! docker ps | grep -q redis; then
              echo "Warning: Redis container not running" 
              exit 1
            fi
            
            # Blue/Green deployment
            CURRENT_CONTAINER=$(docker ps --filter "name=batch-" --format "{{.Names}}" | head -1)
            if [ "$CURRENT_CONTAINER" = "batch-blue" ]; then
              NEW_ENV="green"
              OLD_ENV="blue"
            else
              NEW_ENV="blue"
              OLD_ENV="green"
            fi
            
            echo "Deploying batch server to $NEW_ENV environment..."
            
            # 새 환경 시작
            docker compose --env-file .env --profile $NEW_ENV up -d batch-$NEW_ENV
            
            # 헬스체크
            echo "Waiting for batch-$NEW_ENV to be healthy..."
            HEALTH_CHECK_COUNT=0
            MAX_HEALTH_CHECKS=15
            
            while [ $HEALTH_CHECK_COUNT -lt $MAX_HEALTH_CHECKS ]; do
              if docker exec batch-$NEW_ENV curl -f http://localhost:8081/actuator/health > /dev/null 2>&1; then
                echo "batch-$NEW_ENV is healthy after $((HEALTH_CHECK_COUNT * 10)) seconds"
                break
              fi
              HEALTH_CHECK_COUNT=$((HEALTH_CHECK_COUNT + 1))
              if [ $HEALTH_CHECK_COUNT -eq $MAX_HEALTH_CHECKS ]; then
                echo "batch-$NEW_ENV failed to start after $((MAX_HEALTH_CHECKS * 10)) seconds"
                docker logs batch-$NEW_ENV --tail 20
                exit 1
              fi
              echo "Health check $HEALTH_CHECK_COUNT/$MAX_HEALTH_CHECKS..."
              sleep 10
            done
            
            # 배치 서버 테스트
            echo "Testing batch deployment..."
            sleep 3
            
            TEST_RESULTS=""
            if docker exec batch-$NEW_ENV curl -f http://localhost:8081/actuator/health > /dev/null 2>&1; then
              TEST_RESULTS="${TEST_RESULTS}health:ok "
            else
              TEST_RESULTS="${TEST_RESULTS}health:fail "
            fi
            
            if echo "$TEST_RESULTS" | grep -q "fail"; then
              echo "Batch deployment failed, test results: $TEST_RESULTS"
              echo "Rolling back..."
              docker compose --env-file .env stop batch-$NEW_ENV
              if [ "$OLD_ENV" != "" ] && [ "$(docker ps -q -f name=batch-$OLD_ENV)" = "" ]; then
                echo "Restarting previous environment: batch-$OLD_ENV"
                docker compose --env-file .env --profile $OLD_ENV up -d batch-$OLD_ENV
              fi
              exit 1
            else
              echo "Batch deployment successful, test results: $TEST_RESULTS"
              echo "Stopping old environment ($OLD_ENV)..."
              docker compose --env-file .env stop batch-$OLD_ENV
            
              DEPLOY_END=$(date +%s)
              DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
              echo "Batch Blue/Green deployment completed! Active: $NEW_ENV"
              echo "Total deployment time: ${DEPLOY_DURATION} seconds ($((DEPLOY_DURATION/60)) minutes)"
            
              echo "Cleaning up unused images..."
              docker image prune -f > /dev/null 2>&1 || true
              docker system prune -af --volumes || true
              docker builder prune -af || true
            fi

      - name: Verify Batch deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.RASPBERRY_PI_HOST }}
          username: ${{ env.RASPBERRY_PI_USER }}
          key: ${{ secrets.RASPBERRY_PI_SSH_KEY }}
          port: 2022
          timeout: 60s
          script: |
            echo "Final verification of Batch endpoints..."
            sleep 5
            
            echo "Testing batch health endpoint..."
            if curl -sf http://localhost:8085/actuator/health || curl -sf http://localhost:8086/actuator/health; then
              echo "Batch health check passed"
            else
              echo "Batch health check failed"
            fi
            
            echo "Container Status:"
            docker ps --filter "name=batch-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true
            
            echo "System Resources:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" $(docker ps --filter "name=batch-" -q) || true

      - name: Discord Success Notification
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            **Flik Batch Server 배포 성공!**
            **프로젝트**: ${{ github.repository }}
            **브랜치**: ${{ github.ref_name }}
            **커밋**: `${{ github.sha }}`
            **작성자**: ${{ github.actor }}
            **메시지**: ${{ github.event.head_commit.message }}
            **배치 서버**: 데이터 수집 작업 준비 완료

      - name: Discord Failure Notification
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            **Flik Batch Server 배포 실패!**
            **프로젝트**: ${{ github.repository }}
            **브랜치**: ${{ github.ref_name }}
            **커밋**: `${{ github.sha }}`
            **작성자**: ${{ github.actor }}
            **메시지**: ${{ github.event.head_commit.message }}
            **자동 롤백이 실행되었습니다**
            **로그**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}